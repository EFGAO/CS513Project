/*
* To change this license header, choose License Headers in Project Properties.
* To change this template file, choose Tools | Templates
* and open the template in the editor.
*/
package client;

import com.sun.glass.events.KeyEvent;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.ConnectException;
import java.net.Socket;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import server.Server;

/**
 *
 * @author GaoYifei
 */
public class Client extends javax.swing.JFrame {
    Dialog dialog;
    String nickName;
    BufferedReader reader;
    PrintWriter writer;
    Socket sock;
    Boolean isConnected;
    Thread readerThread;
    DefaultListModel listModel;
    static Client client;
    final static int ONLINE = 0;
    final static int OFFLINE = 1;
    final static Boolean EXIT = false;
    final static Boolean RUN = true;
    Boolean flag;
    String whisperUser;
    int sendingMode;
    int portNumber;
    final static int BROADCAST = 0;
    final static int WHISPER = 1;
    
    
    public Client() {
        initComponents();
        isConnected = false;
        nickName = "";
        this.setTitle("Client");
        listModel = new DefaultListModel();
        userList.setModel(listModel);
        sendingMode = BROADCAST;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        sendButton = new javax.swing.JButton();
        outgoingText = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        userList = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        incomingText = new javax.swing.JTextArea();
        nickNameButton = new javax.swing.JButton();
        nickNameLabel = new javax.swing.JLabel();
        disconnectButton = new javax.swing.JButton();
        connectButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        sendButton.setText("Send");
        sendButton.setToolTipText("Send Message\n");
        sendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendButtonActionPerformed(evt);
            }
        });

        outgoingText.setToolTipText("Type your message here\n");
        outgoingText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                outgoingTextActionPerformed(evt);
            }
        });
        outgoingText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                outgoingTextKeyPressed(evt);
            }
        });

        userList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        userList.setToolTipText("Current Online Users");
        userList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                userListMouseClicked(evt);
            }
        });
        userList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                userListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(userList);

        incomingText.setEditable(false);
        incomingText.setColumns(20);
        incomingText.setRows(5);
        jScrollPane2.setViewportView(incomingText);

        nickNameButton.setText("My Nick Name");
        nickNameButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nickNameButtonActionPerformed(evt);
            }
        });

        nickNameLabel.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        nickNameLabel.setText("Welcome");

        disconnectButton.setText("Disconnect");
        disconnectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                disconnectButtonActionPerformed(evt);
            }
        });

        connectButton.setText("Connect Server");
        connectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectButtonActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        jLabel1.setText("Online Users");

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pic/sent.png"))); // NOI18N

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pic/connected.png"))); // NOI18N

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pic/disconnected.png"))); // NOI18N

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pic/id_card.png"))); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(75, 75, 75)
                .addComponent(jLabel1)
                .addGap(142, 142, 142)
                .addComponent(nickNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 269, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 420, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(outgoingText))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(sendButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(connectButton, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel3))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(disconnectButton, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel4))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(nickNameButton, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel5)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(11, 11, 11))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(nickNameLabel)
                            .addComponent(jLabel1))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(45, 45, 45)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(connectButton)
                            .addComponent(jLabel3))
                        .addGap(19, 19, 19)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(60, 60, 60)
                                .addComponent(disconnectButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(nickNameButton)
                                .addGap(99, 99, 99))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(49, 49, 49)
                                .addComponent(jLabel4)
                                .addGap(55, 55, 55)
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(outgoingText, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(sendButton)))
                .addGap(40, 40, 40))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void outgoingTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_outgoingTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_outgoingTextActionPerformed
    
    private void nickNameButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nickNameButtonActionPerformed
        // TODO add your handling code here:
        if(!this.nickName.equals("")){
            JOptionPane.showMessageDialog(this, "You already have a Nick Name！",
                    "error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        dialog = new Dialog();
        dialog.pack();
        dialog.setVisible(true);
        dialog.newClient = this;
        
    }//GEN-LAST:event_nickNameButtonActionPerformed
    
    private void sendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendButtonActionPerformed
        // TODO add your handling code here:
        
        if(isConnected){
            try{
                if(sendingMode == BROADCAST){
                    this.broadcastMessage(outgoingText.getText());
                }
                else{
                    if(whisperUser != null){
                        this.whisperMessage(outgoingText.getText(), whisperUser);
                    }
                    else{
                        JOptionPane.showMessageDialog(this, "Please Select a User you want to chat with",
                                "error", JOptionPane.ERROR_MESSAGE);
                    }
                    
                }
                
            }
            catch(Exception ex){
                ex.printStackTrace();
            }
            outgoingText.setText("");
            outgoingText.requestFocus();
        }
        else{
            JOptionPane.showMessageDialog(this, "You are not connected to the server！",
                    "error", JOptionPane.ERROR_MESSAGE);
        }
        
    }//GEN-LAST:event_sendButtonActionPerformed
    
    private void connectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectButtonActionPerformed
        // TODO add your handling code here:
        
        this.connect();
    }//GEN-LAST:event_connectButtonActionPerformed
    
    private void disconnectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_disconnectButtonActionPerformed
        // TODO add your handling code here:
        this.disconnect();
    }//GEN-LAST:event_disconnectButtonActionPerformed
    
    private void userListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_userListValueChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_userListValueChanged
    
    private void userListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_userListMouseClicked
        // TODO add your handling code here:
        int index = userList.getSelectedIndex();
        whisperUser = (String) userList.getSelectedValue();
        if(whisperUser != null && nickName != null){
            if(whisperUser.equals(nickName)){
                sendingMode = BROADCAST;
                JOptionPane.showMessageDialog(this, "You are now chatting in the group！",
                        "Information", JOptionPane.INFORMATION_MESSAGE);
            }
            else{
                sendingMode = WHISPER;
                JOptionPane.showMessageDialog(this, "You are now chat with  " + whisperUser,
                        "Information", JOptionPane.INFORMATION_MESSAGE);
            }
            
            System.out.println("sending to " + index + whisperUser );
        }
        
    }//GEN-LAST:event_userListMouseClicked
    
    private void outgoingTextKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_outgoingTextKeyPressed
        // TODO add your handling code here:
        if(evt.getKeyChar() == KeyEvent.VK_ENTER){
            this.sendButton.doClick();
        }
    }//GEN-LAST:event_outgoingTextKeyPressed
    
    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        int option = JOptionPane.showConfirmDialog(this, "Sure to Exit", "Confirmation",  JOptionPane.OK_CANCEL_OPTION);
        if (JOptionPane.OK_OPTION == option) {
            if(isConnected){
                this.disconnect();
            }
            System.exit(0);
        }else{
            this.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
        }
    }//GEN-LAST:event_formWindowClosing
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
        * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
        */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                client = new Client();
                client.setVisible(true);
                
                
            }
        });
    }
    
    
   
    
    public void connect(){
        if(nickName.equals("")){
            System.out.println("No nick Name");
            JOptionPane.showMessageDialog(this, "Please choose a Nick Name before connecting ！",
                    "error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if(isConnected){
            JOptionPane.showMessageDialog(this, "You have already connected to the server ！",
                    "Information", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        System.out.println("Client Start");
        this.setUpNetWorking();
        
        // This thread supports to recieve the message any time server sent
        readerThread = new Thread(new Client.IncomingReader());
        this.flag = RUN;
        readerThread.start();
        
    }
    
    public void disconnect(){
        if(!isConnected){
            JOptionPane.showMessageDialog(this, "You have already offline！",
                    "Warning", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        if(closeConnection())
        {
            JOptionPane.showMessageDialog(this, "Disconnected Successfully！",
                    "Info", JOptionPane.INFORMATION_MESSAGE);
            incomingText.append("You have disconnected with server");
            return;
        }
        else{
            JOptionPane.showMessageDialog(this, "Disconnected Error！",
                    "Error", JOptionPane.ERROR_MESSAGE);
            return;
            
        }
        
    }
    
    /**
     *  Client create a socket to connect to the server.The IP address is set to be 127.0.0.1(localhost)
     * Since the project would be test in the single computer.The port number is arbitrarily choose from
     * 1024 to 65536.
     *
     */
    public void setUpNetWorking(){
        
        try {
            
            portNumber = 10000;
            sock = new Socket("127.0.0.1", portNumber);
            InputStreamReader streamReader = new InputStreamReader(sock.getInputStream());
            reader = new BufferedReader(streamReader);
            writer = new PrintWriter(sock.getOutputStream());
            this.sendCommand(nickName);
            System.out.println("Client Networking estabilished");
            isConnected = true;
            this.updateList(nickName, ONLINE);
            
        }
        catch (ConnectException ex){
            JOptionPane.showMessageDialog(this, "The server is stopped！",
                    "Connection Error", JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
        }
        catch (IOException ex) {
            Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
    }
    
    /**
     *  Declare a synchronized method to make sure that the method is atomic and would not 
     *  have thread conflict.It would be accessed by only one thread at the same time.
     *
     */
    
    public synchronized boolean closeConnection(){
        
        try {
            sendCommand("CLOSE");
            
            System.out.println("The Connection is Closed");
            if (reader != null) {
                reader.close();
                System.out.println("Reader stream has been closed");
            }
            if (writer != null) {
                writer.close();
                System.out.println("Writer stream has been closed");
            }
            if (sock != null) {
                sock.close();
                System.out.println("Socket has been closed");
            }
            
            isConnected = false;
            this.updateList(nickName, OFFLINE);
            this.flag = EXIT;
            nickName = "";
            readerThread.stop();
            return true;
        } catch (IOException ex) {
            ex.printStackTrace();
            isConnected = true;
            return false;
        }
        
    }
    
    
    
    public void broadcastMessage(String m){
        String message = nickName + ": " + m;
        writer.println(message);
        writer.flush();
    }
    
    public void whisperMessage(String m, String user){
        
        this.sendCommand("WHISPER");
        this.sendCommand(user);
        String message = nickName + " whisper to "+ user + ": " + m + "\n";
        incomingText.append(message);
        writer.println(message);
        writer.flush();
        
    }
     /**
     *  command are differ from the message: it would not be broadcasted or whispered by server.
     *  Instead, server would execute specific code when receiving the command.
     */
    public void sendCommand(String c){
        String command = c;
        writer.println(command);
        writer.flush();
    }
    
     /**
     *  IncomingReader is a Runnable which create the readerThread, which responsible
     *  for receiving the message from server. The main thread and readerThread would 
     *  run alternatively to achieve sending and receiving simultaneously.
     */
    public class IncomingReader implements Runnable{
        
        public void run(){
            
            String message;
           
            while(client.flag){
                try{
                    message = reader.readLine();
                    // STOP means the server are stopped
                    if(message.equals("STOP")){
                        incomingText.append("The server stopped \n");
                        if (reader != null) {
                            reader.close();
                        }
                        if (writer != null) {
                            writer.close();
                        }
                        if (sock != null) {
                            sock.close();
                        }
                        listModel.removeAllElements();
                        isConnected = false;
                        client.flag = EXIT; 
//                        break;
                    }
                    // Server would notify the client a user is online
                    else if(message.equals("ONLINE")){
                        System.out.println("ONLINE");
                        
                        String name = reader.readLine();
                        incomingText.append(name + " is online \n");
                        client.updateList(name, ONLINE);
//                        break;
                        
                    }
                    // Server would notify the client a user is offline
                    else if(message.equals("OFFLINE")){
                        String name = reader.readLine();
                        incomingText.append(name + " is offline \n");
                        client.updateList(name, OFFLINE);
                    }
                    // Server would transfer the online userlist data to client
                    else if(message.equals("LIST")){
                        System.out.println("LIST");
                        String s = reader.readLine();
                        int size = Integer.valueOf(s);
                        String name = reader.readLine();
                        for(int i = 0; i < size; i++){
                            client.updateList(name, ONLINE);
                            name = reader.readLine();
                        }

                    }
                    // Server would notify the client that the client which whisper to is not exist 
                    else if(message.equals("NOTEXIST")){
                        incomingText.append("whispering message sent failed because the user whispered to not exist");
                        JOptionPane.showMessageDialog(client, "The user you whisper to is not exist(might be offline)！",
                                "Error", JOptionPane.ERROR_MESSAGE);
                    }
                    
                    // Server would notify the client that the nickName is same as other online user.
                    else if(message.equals("SAME")){
                        incomingText.append("The Nick Name Has Been Used\n");
                        nickName = "";
                        JOptionPane.showMessageDialog(client, "The Nick Name has been used！",
                                "Error", JOptionPane.ERROR_MESSAGE);
                        
                        if(client.closeConnection()){
                            System.out.println("closed connection since the same name");
                        }
                        else{
                            System.out.println("closed faild");
                        }
                        
                        
                    }
                    else{
                        System.out.println("read " + message);
                        incomingText.append(message + "\n");
                    }
                    
                }
                catch(Exception ex){
                    ex.printStackTrace();
                }
            }
            
        }
    }
    
    public void showNickName(){
        nickNameLabel.setText("Welcome !  " + nickName);
        this.repaint();
    }
    
    public void updateList(String nickName, int mod){
        if(mod == ONLINE){
            listModel.addElement(nickName);
            userList.setModel(listModel);
        }
        else if(mod == OFFLINE){
            listModel.removeElement(nickName);
            userList.setModel(listModel);
            
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton connectButton;
    private javax.swing.JButton disconnectButton;
    private javax.swing.JTextArea incomingText;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton nickNameButton;
    private javax.swing.JLabel nickNameLabel;
    private javax.swing.JTextField outgoingText;
    private javax.swing.JButton sendButton;
    private javax.swing.JList userList;
    // End of variables declaration//GEN-END:variables
}
